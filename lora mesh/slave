#include <SPI.h>
#include <LoRa.h>
#include <DHT.h>

#define DHT_PIN 15
#define DHTTYPE DHT11
DHT dht(DHT_PIN, DHTTYPE);

#define SOIL_MOISTURE_A0_PIN 35
#define LIGHT_SENSOR_PIN 34
#define PUMP_PIN 25
#define LIGHT_PIN 26

#define LORA_SS 5
#define LORA_RST 14
#define LORA_DIO0 2
#define LORA_BAND 433E6

#define SLAVE_ID 1
#define RELAY_ID 2

void sendData(const String &data, int dst);

void setup() {
    Serial.begin(115200);
    pinMode(PUMP_PIN, OUTPUT);
    pinMode(LIGHT_PIN, OUTPUT);
    digitalWrite(PUMP_PIN, LOW);
    digitalWrite(LIGHT_PIN, LOW);
    
    dht.begin();
    LoRa.setPins(LORA_SS, LORA_RST, LORA_DIO0);
    if (!LoRa.begin(LORA_BAND)) {
        Serial.println("LoRa init failed!");
        while (1);
    }
    Serial.println("Node 1 (SLAVE) Ready!");
}

void loop() {
    //  ∆ØU TI√äN X·ª¨ L√ù L·ªÜNH TR∆Ø·ªöC
    int packetSize = LoRa.parsePacket();
    if (packetSize) {
        String receivedData = "";
        while (LoRa.available()) {
            receivedData += (char)LoRa.read();
        }
        Serial.println("Received: " + receivedData);

        //  T√°ch d·ªØ li·ªáu t·ª´ g√≥i tin (Sender_ID, Receiver_ID, Command)
        int senderID, receiverID, command;
        sscanf(receivedData.c_str(), "%d,%d,%d", &senderID, &receiverID, &command);

        //  Ch·ªâ x·ª≠ l√Ω n·∫øu Sender l√† Node 2 (Relay) v√† Receiver l√† Node 1 (Slave)
        if (senderID == RELAY_ID && receiverID == SLAVE_ID) {
            Serial.println("Valid command from Relay!");

            // X·ª≠ l√Ω l·ªánh
            if (command == 1) {
                digitalWrite(LIGHT_PIN, HIGH);
                Serial.println(" ƒê√®n B·∫¨T");
            } else if (command == 2) {
                digitalWrite(LIGHT_PIN, LOW);
                Serial.println(" ƒê√®n T·∫ÆT");
            } else if (command == 3) {
                digitalWrite(PUMP_PIN, HIGH);
                Serial.println(" M√°y b∆°m B·∫¨T");
            } else if (command == 4) {
                digitalWrite(PUMP_PIN, LOW);
                Serial.println(" M√°y b∆°m T·∫ÆT");
            }
        } else {
            Serial.println("‚ö† L·ªánh kh√¥ng h·ª£p l·ªá! B·ªè qua...");
        }
    }


    // üìå ƒê·ªçc c·∫£m bi·∫øn
    float temp = dht.readTemperature();
    float hum = dht.readHumidity();
    int soilRaw = analogRead(SOIL_MOISTURE_A0_PIN);
    int lightRaw = analogRead(LIGHT_SENSOR_PIN);

    // Chuy·ªÉn ƒë·ªïi sang %
    int soilPercent = map(soilRaw, 4095, 2500, 0, 100);
    int lightPercent = map(lightRaw, 4095, 0, 0, 100);

    //  G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn
    String data = String(SLAVE_ID) + "," + String(RELAY_ID) + "," + String(millis()) + "," + 
                  String(temp) + "," + String(hum) + "," + String(soilPercent) + "," + String(lightPercent);

    sendData(data, RELAY_ID);
    Serial.printf(" Temp: %.2f¬∞C |  Hum: %.2f%% |  Soil: %d%% |  Light: %d%%\n", 
                   temp, hum, soilPercent, lightPercent);

    delay(10000);  // G·ª≠i m·ªói 10 gi√¢y
}

void sendData(const String &data, int dst) {
    LoRa.beginPacket();
    LoRa.print(data);
    LoRa.endPacket();
    Serial.println("Sent: " + data);
}
