#include <WiFi.h>
#include <PubSubClient.h>
#include <SPI.h>
#include <LoRa.h>

// WiFi & MQTT Config
const char* ssid = "9BE6";
const char* password = "912172293";
const char* mqtt_server = "192.168.1.3";
const int mqtt_port = 1885;
const char* mqtt_user = "user1";
const char* mqtt_password = "123456";

WiFiClient espClient;
PubSubClient client(espClient);

// LoRa Config
#define LORA_SS 5
#define LORA_RST 14
#define LORA_DIO0 2
#define LORA_BAND 433E6

#define GATEWAY_ID 3
#define RELAY_ID 2

// H√†m k·∫øt n·ªëi WiFi
void connectWiFi();
// H√†m k·∫øt n·ªëi MQTT
void connectMQTT();
// H√†m x·ª≠ l√Ω l·ªánh t·ª´ MQTT
void callback(char* topic, byte* message, unsigned int length);
// H√†m g·ª≠i l·ªánh xu·ªëng Relay qua LoRa
void sendCommandToRelay(String command);
// H√†m g·ª≠i d·ªØ li·ªáu l√™n MQTT
void sendDataToMQTT(String data);

void setup() {
    Serial.begin(115200);

    // K·∫øt n·ªëi WiFi
    connectWiFi();

    // K·∫øt n·ªëi MQTT
    client.setServer(mqtt_server, mqtt_port);
    client.setCallback(callback);
    connectMQTT();

    // Kh·ªüi ƒë·ªông LoRa
    LoRa.setPins(LORA_SS, LORA_RST, LORA_DIO0);
    if (!LoRa.begin(LORA_BAND)) {
        Serial.println("‚ùå LoRa init failed!");
        while (1);
    }

    Serial.println("üöÄ Gateway (Node 3) Ready!");
}

void loop() {
    // Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ LoRa
    int packetSize = LoRa.parsePacket();
    if (packetSize) {
        String receivedData = "";
        while (LoRa.available()) {
            receivedData += (char)LoRa.read();
        }

        Serial.println("üì• Data Received: " + receivedData);

        // T√°ch ID c·ªßa Sender v√† Receiver
        int firstComma = receivedData.indexOf(',');
        int secondComma = receivedData.indexOf(',', firstComma + 1);

        if (firstComma == -1 || secondComma == -1) {
            Serial.println("‚ö†Ô∏è Invalid data format!");
            return;
        }

        String senderID = receivedData.substring(0, firstComma);
        String receiverID = receivedData.substring(firstComma + 1, secondComma);

        // Ch·ªâ g·ª≠i MQTT n·∫øu g√≥i tin h∆∞·ªõng ƒë·∫øn Gateway (ID = 3)
        if (receiverID.toInt() == GATEWAY_ID) {
            Serial.println("üì° Sent to MQTT: " + receivedData);
            // G·ª≠i l√™n MQTT v·ªõi ch·ªß ƒë·ªÅ "sensor/data"
            sendDataToMQTT(receivedData);
        } else {
            Serial.println("‚ùå Ignored Data: Not for Gateway");
        }
    }

    // C·∫≠p nh·∫≠t MQTT loop
    client.loop();
}

// K·∫øt n·ªëi WiFi
void connectWiFi() {
    Serial.print("üîó Connecting to WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\n‚úÖ Connected to WiFi!");
}

// H√†m k·∫øt n·ªëi MQTT
void connectMQTT() {
    while (!client.connected()) {
        Serial.print("üîó Connecting to MQTT...");
        if (client.connect("ESP32_Gateway", mqtt_user, mqtt_password)) {
            Serial.println("\n‚úÖ Connected to MQTT!");
            // ƒêƒÉng k√Ω topic m·ªõi: home/control
            if (client.subscribe("home/control")) {
                Serial.println("‚úÖ Subscribed to home/control");
            } else {
                Serial.println("‚ùå Failed to subscribe!");
            }
        } else {
            Serial.print("‚ùå Failed (State: ");
            Serial.print(client.state());
            Serial.println("), retrying...");
            delay(2000);
        }
    }
}

// X·ª≠ l√Ω l·ªánh t·ª´ MQTT
void callback(char* topic, byte* message, unsigned int length) {
    Serial.print("üì© MQTT Command Received on ");
    Serial.print(topic);
    Serial.print(": ");

    String command = "";
    for (int i = 0; i < length; i++) {
        command += (char)message[i];
    }
    Serial.println(command);

    // Ki·ªÉm tra topic l√† "home/control"
    if (String(topic) == "home/control") {
        Serial.println("‚úÖ L·ªánh h·ª£p l·ªá, g·ª≠i xu·ªëng Relay...");
        sendCommandToRelay(command);
    } else {
        Serial.println("‚ö†Ô∏è L·ªánh kh√¥ng ƒë√∫ng topic!");
    }
}


// G·ª≠i l·ªánh xu·ªëng Relay qua LoRa
void sendCommandToRelay(String command) {
    String formattedCommand = String(GATEWAY_ID) + "," + String(RELAY_ID) + "," + command;

    LoRa.beginPacket();
    LoRa.print(formattedCommand);
    LoRa.endPacket();

    Serial.println("üì§ Sent Command to Relay: " + formattedCommand);
}

// G·ª≠i d·ªØ li·ªáu l√™n MQTT
void sendDataToMQTT(String data) {
    if (client.publish("home/sensor", data.c_str())) {
        Serial.println("üì° Sent to MQTT: " + data);
    } else {
        Serial.println("‚ùå MQTT Publish Failed!");
    }
}
